[
  {
    "id": "1493418924169879553",
    "name": "Spring Boot With MybatisPlus",
    "description": "ORM框架采用MybatisPlus，数据库采用MySQL",
    "projectType": 2,
    "fileTemplateList": [
      {
        "name": "pom.xml",
        "path": "pom.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.8</version>\n    </parent>\n\n    <groupId>${maven.groupId}</groupId>\n    <artifactId>${maven.artifactId}</artifactId>\n    <version>${maven.version}</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n\n        <swagger.version>3.0.0</swagger.version>\n        <knife4j.version>3.0.3</knife4j.version>\n        <fastjson.version>1.2.79</fastjson.version>\n        <druid.version>1.2.8</druid.version>\n        <mybatis-plus.version>3.5.0</mybatis-plus.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n                <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>${r'${swagger.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-spring-boot-starter</artifactId>\n            <version>${r'${knife4j.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${r'${fastjson.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>${r'${druid.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>${r'${mybatis-plus.version}'}</version>\n        </dependency>        \n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n",
        "type": 1
      },
      {
        "name": "Application.java",
        "path": "src/main/java/${basePackageDir}/Application.java",
        "content": "package ${basePackage};\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n@SpringBootApplication\n@MapperScan(\"${basePackage}.dao\")\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n",
        "type": 1
      },
      {
        "name": "application.yml",
        "path": "src/main/resources/application.yml",
        "content": "spring:\n  datasource:\n    url: jdbc:mysql://${dataSource.host}:${dataSource.port?c}/${dataSource.database}?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8\n    username: ${dataSource.username}\n    password: ${dataSource.password}\n    hikari:\n      minimum-idle: 5\n      maximum-pool-size: 100\n      idle-timeout: 30000\n      validation-timeout: 250\n      max-lifetime: 1800000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n",
        "type": 1
      },
      {
        "name": "Swagger2Config.java",
        "path": "src/main/java/${basePackageDir}/config/Swagger2Config.java",
        "content": "package ${basePackage+'.config'};\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * Swagger配置\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"${basePackage+'.controller'}\"))\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"${maven.artifactId} API文档\")\n                .description(\"${maven.artifactId} API文档\")\n                .version(\"${maven.version}\")\n                .build();\n    }\n}\n",
        "type": 1
      },
      {
        "name": "model",
        "path": "src/main/java/${basePackageDir}/model/${table.upperCamelName}.java",
        "content": "package ${basePackage}.model;\n\nimport lombok.Data;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableField;\n<#assign columns=table.columns />\n\n<#list columns as column>\n<#if !importedDate?? && column.typeSimpleName=='Date'>\nimport java.util.Date;\n<#assign importedDate=true />\n</#if>\n</#list>\n/**\n* ${table.remarks}\n*/\n@Data\n@TableName(\"${table.tableName}\")\npublic class ${table.upperCamelName} {\n<#list columns as column>\n    /**\n    * ${column.remarks}\n    */\n    <#if column.primaryKey>\n    @TableId\n    </#if>\n    @TableField(\"${column.columnName}\")\n    private ${column.typeSimpleName} ${column.lowerCamelName};\n</#list>\n}",
        "type": 2
      },
      {
        "name": "Mapper",
        "path": "src/main/java/${basePackageDir}/dao/${table.upperCamelName}Mapper.java",
        "content": "package ${basePackage}.dao;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport ${basePackage}.model.${table.upperCamelName};\n\n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Mapper extends BaseMapper<${table.upperCamelName}> {\n\n}",
        "type": 2
      },
      {
        "name": "Service",
        "path": "src/main/java/${basePackageDir}/service/${table.upperCamelName}Service.java",
        "content": "package ${basePackage}.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${basePackage}.model.${table.upperCamelName};\n\n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Service extends IService<${table.upperCamelName}> {\n\n<#list table.columns as column>\n    <#if column.primaryKey>\n    /**\n     * 通过ID查询单个${table.remarks}\n     *\n     * @param id ID\n     * @return {@link ${table.upperCamelName}}\n     */\n     ${table.upperCamelName} findById(${column.typeSimpleName} id);\n\n    /**\n     * 分页查询${table.remarks}\n     *\n     * @param pageNum   页号\n     * @param pageSize 每页大小\n     * @return {@link ${table.upperCamelName}}\n     */\n     IPage<${table.upperCamelName}> findByPage(int pageNum, int pageSize);\n\n    /**\n     * 新增${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void insert(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 修改${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void update(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 通过ID删除单个${table.remarks}\n     *\n     * @param id ID\n     */\n    void deleteById(${column.typeSimpleName} id);\n    </#if>\n</#list>\n\n}",
        "type": 2
      },
      {
        "name": "ServiceImpl",
        "path": "src/main/java/${basePackageDir}/service/impl/${table.upperCamelName}ServiceImpl.java",
        "content": "package ${basePackage}.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.stereotype.Service;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.dao.${table.upperCamelName}Mapper;\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n@Service\npublic class ${table.upperCamelName}ServiceImpl extends ServiceImpl<${table.upperCamelName}Mapper, ${table.upperCamelName}> implements ${table.upperCamelName}Service{\n\n<#list table.columns as column>\n    <#if column.primaryKey>\n    @Autowired\n    private ${table.upperCamelName}Mapper ${table.lowerCamelName}Mapper;\n\n    @Override\n    public ${table.upperCamelName} findById(${column.typeSimpleName} id){\n        return ${table.lowerCamelName}Mapper.selectById(id);\n    }\n\n    @Override\n    public IPage<${table.upperCamelName}> findByPage(int pageNum, int pageSize) {\n        return ${table.lowerCamelName}Mapper.selectPage(new Page<>(pageNum, pageSize), null);\n    }\n\n    @Override\n    public void insert(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Mapper.insert(${table.lowerCamelName});\n    }\n\n    @Override\n    public void update(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Mapper.updateById(${table.lowerCamelName});\n    }\n\n    @Override\n    public void deleteById(${column.typeSimpleName} id){\n        ${table.lowerCamelName}Mapper.deleteById(id);\n    }\n    </#if>\n</#list>\n\n}",
        "type": 2
      },
      {
        "name": "Controller",
        "path": "src/main/java/${basePackageDir}/controller/${table.upperCamelName}Controller.java",
        "content": "package ${basePackage}.controller;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n/**\n * ${table.remarks}\n */\n@RestController\n@RequestMapping(\"/${table.lowerCamelName}\")\n@Api(tags = \"${table.remarks}\")\npublic class ${table.upperCamelName}Controller {\n    @Autowired\n    private ${table.upperCamelName}Service ${table.lowerCamelName}Service;\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(\"通过ID查询单个${table.remarks}\")\n    public ${table.upperCamelName} findById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        return ${table.lowerCamelName}Service.findById(id);\n    }\n\n    @GetMapping\n    @ApiOperation(\"分页查询${table.remarks}\")\n    public IPage<${table.upperCamelName}> findByPage(@ApiParam(\"页号\") @RequestParam(defaultValue = \"1\") Integer pageNum,\n                                                @ApiParam(\"每页大小\") @RequestParam(defaultValue = \"10\") Integer pageSize) {\n        return ${table.lowerCamelName}Service.findByPage(pageNum, pageSize);\n    }\n\n    @PostMapping\n    @ApiOperation(\"新增${table.remarks}\")\n    public void insert(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.insert(${table.lowerCamelName});\n    }\n\n    @PutMapping\n    @ApiOperation(\"修改${table.remarks}\")\n    public void update(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.update(${table.lowerCamelName});\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @ApiOperation(\"通过ID删除单个${table.remarks}\")\n    public void deleteById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        ${table.lowerCamelName}Service.deleteById(id);\n    }\n}\n    </#if>\n</#list>",
        "type": 2
      }
    ],
    "createTime": "2022-02-15 10:56:29",
    "updateTime": "2022-08-05 08:50:06",
    "createName": "admin",
    "organizationName": "public",
    "organizationId": "1493398775811387393",
    "publicFlag": 1
  },
  {
    "id": "1511638812453986306",
    "name": "Spring Boot With JPA",
    "description": "ORM框架采用JPA，数据库采用Mysql",
    "projectType": 2,
    "fileTemplateList": [
      {
        "name": "pom.xml",
        "path": "pom.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.8</version>\n    </parent>\n\n    <groupId>${maven.groupId}</groupId>\n    <artifactId>${maven.artifactId}</artifactId>\n    <version>${maven.version}</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n\n        <swagger.version>3.0.0</swagger.version>\n        <knife4j.version>3.0.3</knife4j.version>\n        <fastjson.version>1.2.79</fastjson.version>\n        <druid.version>1.2.8</druid.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>        \n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>${r'${swagger.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-spring-boot-starter</artifactId>\n            <version>${r'${knife4j.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${r'${fastjson.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>${r'${druid.version}'}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n",
        "type": 1
      },
      {
        "name": "Application.java",
        "path": "src/main/java/${basePackageDir}/Application.java",
        "content": "package ${basePackage};\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n",
        "type": 1
      },
      {
        "name": "application.yml",
        "path": "src/main/resources/application.yml",
        "content": "spring:\n  datasource:\n    url: jdbc:mysql://${dataSource.host}:${dataSource.port?c}/${dataSource.database}?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8\n    username: ${dataSource.username}\n    password: ${dataSource.password}\n    hikari:\n      minimum-idle: 5\n      maximum-pool-size: 100\n      idle-timeout: 30000\n      validation-timeout: 250\n      max-lifetime: 1800000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n",
        "type": 1
      },
      {
        "name": "Swagger2Config.java",
        "path": "src/main/java/${basePackageDir}/config/Swagger2Config.java",
        "content": "package ${basePackage+'.config'};\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * Swagger配置\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"${basePackage+'.controller'}\"))\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"${maven.artifactId} API文档\")\n                .description(\"${maven.artifactId} API文档\")\n                .version(\"${maven.version}\")\n                .build();\n    }\n}\n",
        "type": 1
      },
      {
        "name": "model",
        "path": "src/main/java/${basePackageDir}/model/${table.upperCamelName}.java",
        "content": "package ${basePackage}.model;\n\nimport lombok.Data;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n<#assign columns=table.columns />\n\n<#list columns as column>\n<#if !importedDate?? && column.typeSimpleName=='Date'>\nimport java.util.Date;\n<#assign importedDate=true />\n</#if>\n</#list>\n/**\n* ${table.remarks}\n*/\n@Data\n@Entity\n@Table(name = \"${table.tableName}\")\npublic class ${table.upperCamelName} {\n<#list columns as column>\n    /**\n    * ${column.remarks}\n    */\n    <#if column.primaryKey>\n    @Id\n    </#if>\n    @Column(name = \"${column.columnName}\")    \n    private ${column.typeSimpleName} ${column.lowerCamelName};\n</#list>\n}",
        "type": 2
      },
      {
        "name": "Repository",
        "path": "src/main/java/${basePackageDir}/repository/${table.upperCamelName}Repository.java",
        "content": "package ${basePackage}.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport ${basePackage}.model.${table.upperCamelName};\n\n<#list table.columns as column>\n<#if column.primaryKey> \n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Repository extends JpaRepository<${table.upperCamelName}, ${column.typeSimpleName}> {\n\n}    \n</#if>    \n</#list>",
        "type": 2
      },
      {
        "name": "Service",
        "path": "src/main/java/${basePackageDir}/service/${table.upperCamelName}Service.java",
        "content": "package ${basePackage}.service;\n\nimport ${basePackage}.model.${table.upperCamelName};\nimport org.springframework.data.domain.Page;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Service {\n\n    /**\n     * 通过ID查询单个${table.remarks}\n     *\n     * @param id ID\n     * @return {@link ${table.upperCamelName}}\n     */\n     ${table.upperCamelName} findById(${column.typeSimpleName} id);\n\n    /**\n     * 分页查询${table.remarks}\n     *\n     * @param pageNum   页号\n     * @param pageSize 每页大小\n     * @return {@link ${table.upperCamelName}}\n     */\n     Page<${table.upperCamelName}> findByPage(int pageNum, int pageSize);\n\n    /**\n     * 新增${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void insert(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 修改${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void update(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 通过ID删除单个${table.remarks}\n     *\n     * @param id ID\n     */\n    void deleteById(${column.typeSimpleName} id);\n\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "ServiceImpl",
        "path": "src/main/java/${basePackageDir}/service/impl/${table.upperCamelName}ServiceImpl.java",
        "content": "package ${basePackage}.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Service;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.repository.${table.upperCamelName}Repository;\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n@Service\npublic class ${table.upperCamelName}ServiceImpl implements ${table.upperCamelName}Service {\n\n    @Autowired\n    private ${table.upperCamelName}Repository ${table.lowerCamelName}Repository;\n\n    @Override\n    public ${table.upperCamelName} findById(${column.typeSimpleName} id){\n        return ${table.lowerCamelName}Repository.findById(id).orElse(null);\n    }\n\n    @Override\n    public Page<${table.upperCamelName}> findByPage(int pageNum, int pageSize) {\n        return ${table.lowerCamelName}Repository.findAll(PageRequest.of(pageNum, pageSize));\n    }\n\n    @Override\n    public void insert(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Repository.save(${table.lowerCamelName});\n    }\n\n    @Override\n    public void update(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Repository.save(${table.lowerCamelName});\n    }\n\n    @Override\n    public void deleteById(${column.typeSimpleName} id){\n        ${table.lowerCamelName}Repository.deleteById(id);\n    }\n\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "Controller",
        "path": "src/main/java/${basePackageDir}/controller/${table.upperCamelName}Controller.java",
        "content": "package ${basePackage}.controller;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n/**\n * ${table.remarks}\n */\n@RestController\n@RequestMapping(\"/${table.lowerCamelName}\")\n@Api(tags = \"${table.remarks}\")\npublic class ${table.upperCamelName}Controller {\n    @Autowired\n    private ${table.upperCamelName}Service ${table.lowerCamelName}Service;\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(\"通过ID查询单个${table.remarks}\")\n    public ${table.upperCamelName} findById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        return ${table.lowerCamelName}Service.findById(id);\n    }\n\n    @GetMapping\n    @ApiOperation(\"分页查询${table.remarks}\")\n    public Page<${table.upperCamelName}> findByPage(@ApiParam(\"页号\") @RequestParam(defaultValue = \"1\") Integer pageNum,\n                                                @ApiParam(\"每页大小\") @RequestParam(defaultValue = \"10\") Integer pageSize) {\n        return ${table.lowerCamelName}Service.findByPage(pageNum, pageSize);\n    }\n\n    @PostMapping\n    @ApiOperation(\"新增${table.remarks}\")\n    public void insert(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.insert(${table.lowerCamelName});\n    }\n\n    @PutMapping\n    @ApiOperation(\"修改${table.remarks}\")\n    public void update(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.update(${table.lowerCamelName});\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @ApiOperation(\"通过ID删除单个${table.remarks}\")\n    public void deleteById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        ${table.lowerCamelName}Service.deleteById(id);\n    }\n}\n</#if>\n</#list>",
        "type": 2
      }
    ],
    "createTime": "2022-04-06 17:35:52",
    "updateTime": "2022-04-07 10:39:14",
    "createName": "xiaoyu",
    "organizationName": "xiaoyu",
    "organizationId": "1493844491293724674",
    "publicFlag": 1
  },
  {
    "id": "1512350472600756225",
    "name": "Spring Boot With Mybatis",
    "description": "ORM框架采用使用XML的Mybatis",
    "projectType": 2,
    "fileTemplateList": [
      {
        "name": "pom.xml",
        "path": "pom.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.8</version>\n    </parent>\n\n    <groupId>${maven.groupId}</groupId>\n    <artifactId>${maven.artifactId}</artifactId>\n    <version>${maven.version}</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n\n        <swagger.version>3.0.0</swagger.version>\n        <knife4j.version>3.0.3</knife4j.version>\n        <fastjson.version>1.2.79</fastjson.version>\n        <druid.version>1.2.8</druid.version>\n        <mybatis.version>2.0.1</mybatis.version>\n        <pagehelper.version>1.2.10</pagehelper.version>        \n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>        \n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>${r'${mybatis.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>${r'${pagehelper.version}'}</version>\n        </dependency>            \n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>${r'${swagger.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-spring-boot-starter</artifactId>\n            <version>${r'${knife4j.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${r'${fastjson.version}'}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>${r'${druid.version}'}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n",
        "type": 1
      },
      {
        "name": "Application.java",
        "path": "src/main/java/${basePackageDir}/Application.java",
        "content": "package ${basePackage};\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@MapperScan(\"${basePackage}.mapper\")\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n",
        "type": 1
      },
      {
        "name": "application.yml",
        "path": "src/main/resources/application.yml",
        "content": "spring:\n  datasource:\n    url: jdbc:mysql://${dataSource.host}:${dataSource.port?c}/${dataSource.database}?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8\n    username: ${dataSource.username}\n    password: ${dataSource.password}\n    hikari:\n      minimum-idle: 5\n      maximum-pool-size: 100\n      idle-timeout: 30000\n      validation-timeout: 250\n      max-lifetime: 1800000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    \nmybatis:\n  mapper-locations: classpath:/mapper/**/*.xml",
        "type": 1
      },
      {
        "name": "Swagger2Config.java",
        "path": "src/main/java/${basePackageDir}/config/Swagger2Config.java",
        "content": "package ${basePackage+'.config'};\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * Swagger配置\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"${basePackage+'.controller'}\"))\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"${maven.artifactId} API文档\")\n                .description(\"${maven.artifactId} API文档\")\n                .version(\"${maven.version}\")\n                .build();\n    }\n}\n",
        "type": 1
      },
      {
        "name": "model",
        "path": "src/main/java/${basePackageDir}/model/${table.upperCamelName}.java",
        "content": "package ${basePackage}.model;\n\nimport lombok.Data;\n<#assign columns=table.columns />\n\n<#list columns as column>\n<#if !importedDate?? && column.typeSimpleName=='Date'>\nimport java.util.Date;\n<#assign importedDate=true />\n</#if>\n</#list>\n/**\n* ${table.remarks}\n*/\n@Data\npublic class ${table.upperCamelName} {\n<#list columns as column>\n    /**\n    * ${column.remarks}\n    */\n    <#if column.primaryKey>\n    </#if>\n    private ${column.typeSimpleName} ${column.lowerCamelName};\n</#list>\n}",
        "type": 2
      },
      {
        "name": "Mapper",
        "path": "src/main/java/${basePackageDir}/mapper/${table.upperCamelName}Mapper.java",
        "content": "package ${basePackage}.mapper;\n\nimport com.github.pagehelper.Page;\nimport ${basePackage}.model.${table.upperCamelName};\n\n<#list table.columns as column>\n<#if column.primaryKey> \n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Mapper {\n/**\n     * 通过ID查询单个${table.remarks}\n     *\n     * @param id ID\n     * @return {@link ${table.upperCamelName}}\n     */\n     ${table.upperCamelName} findById(${column.typeSimpleName} id);\n\n    /**\n     * 分页查询${table.remarks}\n     *\n     * @return {@link ${table.upperCamelName}}\n     */\n     Page<${table.upperCamelName}> findByPage();\n\n    /**\n     * 新增${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void insert(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 修改${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void update(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 通过ID删除单个${table.remarks}\n     *\n     * @param id ID\n     */\n    void deleteById(${column.typeSimpleName} id);\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "Service",
        "path": "src/main/java/${basePackageDir}/service/${table.upperCamelName}Service.java",
        "content": "package ${basePackage}.service;\n\nimport ${basePackage}.model.${table.upperCamelName};\nimport com.github.pagehelper.PageInfo;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n/**\n * ${table.remarks}\n */\npublic interface ${table.upperCamelName}Service {\n\n    /**\n     * 通过ID查询单个${table.remarks}\n     *\n     * @param id ID\n     * @return {@link ${table.upperCamelName}}\n     */\n     ${table.upperCamelName} findById(${column.typeSimpleName} id);\n\n    /**\n     * 分页查询${table.remarks}\n     *\n     * @param pageNum   页号\n     * @param pageSize 每页大小\n     * @return {@link ${table.upperCamelName}}\n     */\n     PageInfo<${table.upperCamelName}> findByPage(int pageNum, int pageSize);\n\n    /**\n     * 新增${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void insert(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 修改${table.remarks}\n     *\n     * @param ${table.lowerCamelName} ${table.upperCamelName}\n     */\n    void update(${table.upperCamelName} ${table.lowerCamelName});\n\n    /**\n     * 通过ID删除单个${table.remarks}\n     *\n     * @param id ID\n     */\n    void deleteById(${column.typeSimpleName} id);\n\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "ServiceImpl",
        "path": "src/main/java/${basePackageDir}/service/impl/${table.upperCamelName}ServiceImpl.java",
        "content": "package ${basePackage}.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.stereotype.Service;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.mapper.${table.upperCamelName}Mapper;\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n@Service\npublic class ${table.upperCamelName}ServiceImpl implements ${table.upperCamelName}Service {\n\n    @Autowired\n    private ${table.upperCamelName}Mapper ${table.lowerCamelName}Mapper;\n\n    @Override\n    public ${table.upperCamelName} findById(${column.typeSimpleName} id){\n        return ${table.lowerCamelName}Mapper.findById(id);\n    }\n\n    @Override\n    public PageInfo<${table.upperCamelName}> findByPage(int pageNum, int pageSize) {\n        PageHelper.startPage(pageNum, pageSize);\n        return PageInfo.of(${table.lowerCamelName}Mapper.findByPage());\n    }\n\n    @Override\n    public void insert(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Mapper.insert(${table.lowerCamelName});\n    }\n\n    @Override\n    public void update(${table.upperCamelName} ${table.lowerCamelName}){\n        ${table.lowerCamelName}Mapper.update(${table.lowerCamelName});\n    }\n\n    @Override\n    public void deleteById(${column.typeSimpleName} id){\n        ${table.lowerCamelName}Mapper.deleteById(id);\n    }\n\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "Controller",
        "path": "src/main/java/${basePackageDir}/controller/${table.upperCamelName}Controller.java",
        "content": "package ${basePackage}.controller;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport ${basePackage}.model.${table.upperCamelName};\nimport ${basePackage}.service.${table.upperCamelName}Service;\n\n<#list table.columns as column>\n<#if column.primaryKey>\n/**\n * ${table.remarks}\n */\n@RestController\n@RequestMapping(\"/${table.lowerCamelName}\")\n@Api(tags = \"${table.remarks}\")\npublic class ${table.upperCamelName}Controller {\n    @Autowired\n    private ${table.upperCamelName}Service ${table.lowerCamelName}Service;\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(\"通过ID查询单个${table.remarks}\")\n    public ${table.upperCamelName} findById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        return ${table.lowerCamelName}Service.findById(id);\n    }\n\n    @GetMapping\n    @ApiOperation(\"分页查询${table.remarks}\")\n    public PageInfo<${table.upperCamelName}> findByPage(@ApiParam(\"页号\") @RequestParam(defaultValue = \"1\") Integer pageNum,\n                                                @ApiParam(\"每页大小\") @RequestParam(defaultValue = \"10\") Integer pageSize) {\n        return ${table.lowerCamelName}Service.findByPage(pageNum, pageSize);\n    }\n\n    @PostMapping\n    @ApiOperation(\"新增${table.remarks}\")\n    public void insert(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.insert(${table.lowerCamelName});\n    }\n\n    @PutMapping\n    @ApiOperation(\"修改${table.remarks}\")\n    public void update(@RequestBody ${table.upperCamelName} ${table.lowerCamelName}) {\n        ${table.lowerCamelName}Service.update(${table.lowerCamelName});\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @ApiOperation(\"通过ID删除单个${table.remarks}\")\n    public void deleteById(@ApiParam(\"ID\") @PathVariable(\"id\") ${column.typeSimpleName} id) {\n        ${table.lowerCamelName}Service.deleteById(id);\n    }\n}\n</#if>\n</#list>",
        "type": 2
      },
      {
        "name": "MapperXML",
        "path": "src/main/resources/mapper/${table.upperCamelName}Mapper.xml",
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"${basePackage}.mapper.${table.upperCamelName}Mapper\">\r\n\r\n    <resultMap id=\"${table.lowerCamelName}Map\" type=\"${basePackage}.model.${table.upperCamelName}\">\r\n        <#list table.columns as column>\r\n        <#if column.primaryKey>\r\n        <id property=\"${column.lowerCamelName}\" column=\"${column.columnName}\"/>\r\n        <#else>\r\n        <result property=\"${column.lowerCamelName}\" column=\"${column.columnName}\"/>\r\n        </#if>\r\n        </#list>\r\n    </resultMap>\r\n\r\n    <!--通过ID查询单个${table.remarks}-->\r\n    <select id=\"findById\" resultMap=\"${table.lowerCamelName}Map\">\r\n        SELECT <#list table.columns as column><#if column_index!=0>,</#if>${column.columnName}</#list> FROM ${table.tableName}\r\n        WHERE <#list table.columns as column><#if column.primaryKey>${column.columnName}</#if></#list>=<#noparse>#{id}</#noparse>\r\n    </select>\r\n\r\n    <!--分页查询${table.remarks}-->\r\n    <select id=\"findByPage\" resultMap=\"${table.lowerCamelName}Map\">\r\n        SELECT <#list table.columns as column><#if column_index!=0>,</#if>${column.columnName}</#list> FROM ${table.tableName}\r\n    </select>\r\n\r\n    <!--新增${table.remarks}-->\r\n    <insert id=\"insert\">\r\n        INSERT INTO ${table.tableName}(<#list table.columns as column><#if column_index!=0>,</#if>${column.columnName}</#list>)\r\n        VALUES (<#list table.columns as column><#if column_index!=0>,</#if><#noparse>#{</#noparse>${column.lowerCamelName}}</#list>)\r\n    </insert>\r\n\r\n    <!--修改${table.remarks}-->\r\n    <update id=\"update\">\r\n        UPDATE ${table.tableName} SET <#list table.columns as column><#if !column.primaryKey><#if table.columns[0].primaryKey&&column_index!=1>,</#if>${column.columnName}=<#noparse>#{</#noparse>${column.lowerCamelName}}</#if></#list>\r\n        WHERE <#list table.columns as column><#if column.primaryKey>${column.columnName}=<#noparse>#{</#noparse>${column.lowerCamelName}}</#if></#list>\r\n    </update>\r\n\r\n    <!--通过ID删除单个${table.remarks}-->\r\n    <delete id=\"deleteById\">\r\n        DELETE FROM ${table.tableName}\r\n        WHERE <#list table.columns as column><#if column.primaryKey>${column.columnName}</#if></#list>=<#noparse>#{id}</#noparse>\r\n    </delete>\r\n\r\n</mapper>",
        "type": 2
      }
    ],
    "createTime": "2022-04-08 16:43:45",
    "updateTime": "2022-04-29 12:17:51",
    "createName": "xiaoyu",
    "organizationName": "xiaoyu",
    "organizationId": "1493844491293724674",
    "publicFlag": 1
  },
  {
    "id": "1512350472600756226",
    "name": "vue-element-admin",
    "description": "采用vue-element-admin的分层结构，根据表结构生成列表管理功能",
    "projectType": 3,
    "fileTemplateList": [
      {
        "name": "api",
        "path": "src/api/${table.upperCamelName}.js",
        "content": "import request from '@/utils/request'\r\n\r\nexport function list(data) {\r\n  return request({\r\n    url: '/${table.lowerCamelName}/list',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\nexport function get(id) {\r\n  return request({\r\n    url: '/${table.lowerCamelName}/get',\r\n    method: 'get',\r\n    params: { id }\r\n  })\r\n}\r\nexport function create(data) {\r\n  return request({\r\n    url: '/${table.lowerCamelName}/create',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\nexport function update(data) {\r\n  return request({\r\n    url: '/${table.lowerCamelName}/update',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\nexport function del(id) {\r\n  return request({\r\n    url: '/${table.lowerCamelName}/delete',\r\n    method: 'post',\r\n    params: { id }\r\n  })\r\n}",
        "type": 2
      },
      {
        "name": "vue",
        "path": "src/views/${table.lowerCamelName}/${table.lowerCamelName}.vue",
        "content": "<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"filter-container\">\r\n      <el-input v-model=\"listQuery.keyword\" placeholder=\"关键字\" style=\"width: 200px\" class=\"filter-item\"\r\n        @keyup.enter.native=\"handleFilter\" />\r\n      <el-button class=\"filter-item\" style=\"margin-left: 10px\" type=\"primary\" icon=\"el-icon-search\"\r\n        @click=\"handleFilter\">\r\n        搜索\r\n      </el-button>\r\n      <el-button class=\"filter-item\" style=\"margin-left: 10px\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\r\n        添加\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :key=\"tableKey\" v-loading=\"listLoading\" :data=\"list\" border fit highlight-current-row style=\"width: 100%\">\r\n      <#list table.columns as column>\r\n        <el-table-column label=\"${column.remarks}\" align=\"center\">\r\n          <template slot-scope=\"{ row }\">\r\n            <span>{{ row.${ column.lowerCamelName } }}</span>\r\n          </template>\r\n        </el-table-column>\r\n      </#list>\r\n      <el-table-column label=\"操作\" align=\"center\" class-name=\"small-padding fixed-width\">\r\n        <template slot-scope=\"{ row, $index }\">\r\n          <el-button size=\"mini\" type=\"primary\" @click=\"handleUpdate(row)\">\r\n            编辑\r\n          </el-button>\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(row, $index)\">\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <pagination v-show=\"total > 0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\"\r\n      @pagination=\"getList\" />\r\n\r\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\r\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-width=\"100px\" style=\"width: 400px; margin-left: 50px\">\r\n        <#list table.columns as column>\r\n          <el-form-item label=\"${column.remarks}\" prop=\"${ column.lowerCamelName }\">\r\n            <el-input v-model=\"temp.${ column.lowerCamelName }\" />\r\n          </el-form-item>\r\n        </#list>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogFormVisible = false\"> 取消 </el-button>\r\n        <el-button type=\"primary\" @click=\"dialogStatus === 'create' ? createData() : updateData()\">\r\n          确定\r\n        </el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { create, update, list, del } from \"@/api/${table.upperCamelName}\";\r\nimport Pagination from \"@/components/Pagination\";\r\n\r\nexport default {\r\n  name: \"${table.lowerCamelName}\",\r\n  components: { Pagination },\r\n  data() {\r\n    return {\r\n      tableKey: 0,\r\n      list: [],\r\n      total: 0,\r\n      listLoading: true,\r\n      listQuery: {\r\n        page: 1,\r\n        limit: 10,\r\n        keyword: \"\",\r\n      },\r\n      temp: {\r\n        <#list table.columns as column >\r\n        ${ column.lowerCamelName }: undefined,\r\n        </#list>\r\n      },\r\n      dialogFormVisible: false,\r\n      dialogStatus: \"\",\r\n      textMap: {\r\n        update: \"编辑\",\r\n        create: \"添加\",\r\n      },\r\n      rules: {\r\n        <#list table.columns as column >\r\n        ${ column.lowerCamelName }: [{ required: true, message: \"${ column.remarks }必填\", trigger: \"blur\" }],\r\n        </#list>        \r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    this.getList();\r\n  },\r\n  methods: {\r\n    getList() {\r\n      this.listLoading = true;\r\n      list({\r\n        keyword: this.listQuery.keyword,\r\n        pageNumber: this.listQuery.page,\r\n        pageSize: this.listQuery.limit,\r\n      }).then((response) => {\r\n        this.list = response.data.list;\r\n        this.total = response.data.totalNumber;\r\n        this.listLoading = false;\r\n      });\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1;\r\n      this.getList();\r\n    },\r\n    handleCreate() {\r\n      this.temp={\r\n        <#list table.columns as column >\r\n        ${ column.lowerCamelName }: undefined,\r\n        </#list>\r\n      }\r\n      this.dialogStatus = \"create\";\r\n      this.dialogFormVisible = true;\r\n      this.$nextTick(() => {\r\n        this.$refs[\"dataForm\"].clearValidate();\r\n      });\r\n    },\r\n    createData() {\r\n      this.$refs[\"dataForm\"].validate((valid) => {\r\n        if (valid) {\r\n          create(this.temp).then(() => {\r\n            this.dialogFormVisible = false;\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"添加成功\",\r\n            });\r\n            this.getList();\r\n          });\r\n        }\r\n      });\r\n    },\r\n    handleUpdate(row) {\r\n      this.temp = Object.assign({}, row); // copy obj\r\n      this.dialogStatus = \"update\";\r\n      this.dialogFormVisible = true;\r\n      this.$nextTick(() => {\r\n        this.$refs[\"dataForm\"].clearValidate();\r\n      });\r\n    },\r\n    updateData() {\r\n      this.$refs[\"dataForm\"].validate((valid) => {\r\n        if (valid) {\r\n          const tempData = Object.assign({}, this.temp);\r\n          update(tempData).then(() => {\r\n            this.dialogFormVisible = false;\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"编辑成功\",\r\n            });\r\n            this.getList();\r\n          });\r\n        }\r\n      });\r\n    },\r\n    handleDelete(row, index) {\r\n      this.$confirm(\"确定删除?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          del(row.id).then(() => {\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"删除成功!\",\r\n            });\r\n            this.getList();\r\n          });\r\n        })\r\n        .catch(() => { });\r\n    },\r\n  },\r\n};\r\n</script>",
        "type": 2
      }
    ],
    "createTime": "2022-06-23 09:38:08",
    "updateTime": "2022-06-23 11:26:10",
    "createName": "xiaoyu",
    "organizationName": "xiaoyu",
    "organizationId": "1493844491293724674",
    "publicFlag": 1
  }
]
